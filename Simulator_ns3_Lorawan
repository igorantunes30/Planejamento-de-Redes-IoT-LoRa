#include "ns3/command-line.h"
#include "ns3/core-module.h"
#include "ns3/mobility-helper.h"
#include "ns3/node-container.h"
#include "ns3/lora-channel.h"
#include "ns3/log.h"
#include "ns3/lorawan-mac-helper.h"
#include "ns3/lora-helper.h"
#include "ns3/lora-phy-helper.h"
#include "ns3/network-server-helper.h"
#include "ns3/forwarder-helper.h"
#include "ns3/buildings-propagation-loss-model.h"
#include "ns3/okumura-hata-propagation-loss-model.h"
#include <fstream>
#include <random>
#include <iostream>
#include <iomanip>

using namespace ns3;
using namespace lorawan;

NS_LOG_COMPONENT_DEFINE("LoRaWANSimulation");

int main(int argc, char *argv[]) {
    // Parâmetros ajustáveis
    uint32_t numGateways = 4;        // Número de Gateways
    uint32_t numEndDevices = 2000;  // Número de End Devices
    double areaSize = 100000.0;      // Tamanho da área (lado em metros)
    double meanLambda = 52.0;        // Lambda médio para a distribuição de Poisson
    double simulationTime = 10.0;    // Tempo total da simulação em segundos
    double frequency = 915.0;        // Frequência (MHz)
    double bandwidth = 125000.0;     // Largura de banda (em Hz)
    std::string codingRate = "4/5";  // Coding Rate

    // Adicionar os parâmetros configuráveis à linha de comando
    CommandLine cmd;
    cmd.AddValue("numGateways", "Número de Gateways", numGateways);
    cmd.AddValue("numEndDevices", "Número de End Devices", numEndDevices);
    cmd.AddValue("areaSize", "Tamanho da área (lado em metros)", areaSize);
    cmd.AddValue("meanLambda", "Média Lambda para a distribuição de Poisson", meanLambda);
    cmd.AddValue("simulationTime", "Tempo total da simulação em segundos", simulationTime);
    cmd.AddValue("frequency", "Frequência (MHz)", frequency);
    cmd.AddValue("bandwidth", "Largura de banda (Hz)", bandwidth);
    cmd.AddValue("codingRate", "Coding rate (ex: 4/5)", codingRate);
    cmd.Parse(argc, argv);

    // Configuração do canal LoRa com Okumura-Hata
    Ptr<OkumuraHataPropagationLossModel> lossModel = CreateObject<OkumuraHataPropagationLossModel>();
    lossModel->SetAttribute("Frequency", DoubleValue(frequency));  // Configuração da frequência
    lossModel->SetAttribute("Environment", StringValue("Urban"));

    Ptr<ConstantSpeedPropagationDelayModel> delayModel = CreateObject<ConstantSpeedPropagationDelayModel>();
    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(lossModel, delayModel);

    // Gerar posições aleatórias para Gateways
    NodeContainer gateways;
    gateways.Create(numGateways);

    MobilityHelper mobilityGw;
    Ptr<ListPositionAllocator> positionAllocGw = CreateObject<ListPositionAllocator>();

    std::default_random_engine generator;
    std::poisson_distribution<int> distribution(meanLambda);

    for (uint32_t i = 0; i < numGateways; ++i) {
        double x = areaSize * ((double)rand() / RAND_MAX);              // Posição aleatória X
        double y = areaSize * ((double)distribution(generator) / meanLambda); // Posição Poisson Y
        positionAllocGw->Add(Vector(x, y, 30.0));  // Altura do Gateway: 30 metros
    }
    mobilityGw.SetPositionAllocator(positionAllocGw);
    mobilityGw.SetMobilityModel("ns3::ConstantPositionMobilityModel");
    mobilityGw.Install(gateways);

    // Configuração dos End Devices
    NodeContainer endDevices;
    endDevices.Create(numEndDevices);

    MobilityHelper mobilityEd;
    Ptr<ListPositionAllocator> positionAllocEd = CreateObject<ListPositionAllocator>();

    for (uint32_t i = 0; i < numEndDevices; ++i) {
        double x = areaSize * ((double)rand() / RAND_MAX);              // Posição aleatória X
        double y = areaSize * ((double)distribution(generator) / meanLambda); // Posição Poisson Y
        positionAllocEd->Add(Vector(x, y, 1.5));  // Altura do dispositivo: 1.5 metros
    }
    mobilityEd.SetPositionAllocator(positionAllocEd);
    mobilityEd.SetMobilityModel("ns3::ConstantPositionMobilityModel");
    mobilityEd.Install(endDevices);

    // Helpers do LoRaWAN
    LoraHelper loraHelper;
    LoraPhyHelper phyHelper = LoraPhyHelper();
    phyHelper.SetChannel(channel);          // Configuração do canal
    LorawanMacHelper macHelper = LorawanMacHelper();

    // Instalar dispositivos Gateway
    phyHelper.SetDeviceType(LoraPhyHelper::GW);
    macHelper.SetDeviceType(LorawanMacHelper::GW);
    loraHelper.Install(phyHelper, macHelper, gateways);

    // Instalar dispositivos End Devices
    phyHelper.SetDeviceType(LoraPhyHelper::ED);
    macHelper.SetDeviceType(LorawanMacHelper::ED_A);
    loraHelper.Install(phyHelper, macHelper, endDevices);

    // Configurar Spreading Factors (SF)
    LorawanMacHelper::SetSpreadingFactorsUp(endDevices, gateways, channel);

    // Salvar resultados no arquivo CSV
    std::ofstream resultFile("lorawan_results.csv");
    if (!resultFile.is_open()) {
        NS_LOG_ERROR("Erro ao abrir o arquivo lorawan_results.csv!");
        return 1;
    }

    resultFile << "NodeType,NodeID,X,Y,SF,SNR,Tp,Energy,Payload,TimeOnAir,BitsPerPacket,PacketRate,TrafficLoad,DutyCycle\n";

    uint32_t totalPackets = 0;
    uint32_t successfulPackets = 0;
    double totalEnergyConsumed = 0.0;
    double totalThroughput = 0.0; // Inicializar a vazão total em bits por segundo

    // Salvar dados dos Gateways
    for (uint32_t i = 0; i < numGateways; ++i) {
        Ptr<MobilityModel> mobility = gateways.Get(i)->GetObject<MobilityModel>();
        Vector position = mobility->GetPosition();
        resultFile << "Gateway," << i << "," << position.x << "," << position.y << ",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA\n";
    }

    // Salvar dados dos End Devices
    std::poisson_distribution<int> sfDistribution(9);   // Distribuição centrada em SF 9
    std::poisson_distribution<int> snrDistribution(10); // SNR centrado em 10 dB
    std::poisson_distribution<int> tpDistribution(14);  // Potência de transmissão (em dBm)

    for (uint32_t i = 0; i < numEndDevices; ++i) {
        Ptr<MobilityModel> mobility = endDevices.Get(i)->GetObject<MobilityModel>();
        Vector position = mobility->GetPosition();

        uint8_t sf = std::min(std::max(sfDistribution(generator), 7), 12);  // SF aleatório entre 7 e 12
        double snr = snrDistribution(generator);                           // SNR aleatório
        double tp = tpDistribution(generator);                             // Potência de transmissão (em dBm)
        double energy = sf * 0.01;                                         // Energia consumida em mJ (exemplo)
        double payload = 20.0;                                             // Payload em bytes
        double timeOnAir = 1 / bandwidth;                                  // Tempo no ar (em s)
        double bitsPerPacket = payload * 8;
        double packetRate = 1.0 / timeOnAir;                               // Pacotes por segundo
        double trafficLoad = bitsPerPacket * packetRate;
        double dutyCycle = (timeOnAir / 1000.0) * packetRate;

        totalPackets++;
        successfulPackets += (snr > 5.0 ? 1 : 0); // Considera pacotes com SNR > 5 como bem-sucedidos
        totalEnergyConsumed += energy;

        // Adicionar ao cálculo de vazão
        totalThroughput += bitsPerPacket * packetRate;

        resultFile << "EndDevice," << i << "," << position.x << "," << position.y << "," << (int)sf << ","
                   << snr << "," << tp << "," << energy << "," << payload << "," << timeOnAir << ","
                   << bitsPerPacket << "," << packetRate << "," << trafficLoad << "," << dutyCycle << "\n";
    }

    resultFile.close();

    // Exibir parâmetros derivados no terminal
    std::cout << std::fixed << std::setprecision(2);
    std::cout << "Parâmetros Derivados da Simulação:" << std::endl;
    std::cout << "Total de Pacotes Transmitidos: " << totalPackets << std::endl;
    std::cout << "Total de Pacotes Bem-Sucedidos: " << successfulPackets << std::endl;
    std::cout << "Taxa de Sucesso (Packet Delivery Ratio): " 
              << (successfulPackets * 100.0 / totalPackets) << "%" << std::endl;
    std::cout << "Energia Total Consumida: " << totalEnergyConsumed << " mJ" << std::endl;
    std::cout << "Vazão Total: " << totalThroughput / simulationTime << " bits/s" << std::endl;

    NS_LOG_INFO("Simulação concluída. Resultados salvos em 'lorawan_results.csv'.");

    Simulator::Stop(Seconds(simulationTime));
    Simulator::Run();
    Simulator::Destroy();

    return 0;
}
